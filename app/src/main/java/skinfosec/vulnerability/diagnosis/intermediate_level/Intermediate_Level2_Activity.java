package skinfosec.vulnerability.diagnosis.intermediate_level;

import android.app.Activity;
import android.content.Intent;
import android.content.res.AssetManager;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import org.w3c.dom.Text;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserFactory;

import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.Enumeration;


public class Intermediate_Level2_Activity extends Activity {

    private static final String TAG = "junshae";

    final int STEP_NONE = 0 ;
    final int STEP_PASS = 1 ;
    String dev_password = null ;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_intermediate_level_2);
        EditText editText_Level2 = (EditText) findViewById(R.id.editText_Level2);
        Button answer2 = (Button) findViewById(R.id.answer2);

        AssetManager am = getResources().getAssets() ;
        InputStream is = null ;

        try {
            is = am.open("security.xml") ;
            XmlPullParserFactory parserFactory = XmlPullParserFactory.newInstance();
            XmlPullParser parser = parserFactory.newPullParser() ;
            parser.setInput(is, "UTF-8") ;

            int eventType = parser.getEventType() ;
            int step = STEP_NONE ;

            while (eventType != XmlPullParser.END_DOCUMENT) {
                if (eventType == XmlPullParser.START_TAG) {
                    String startTag = parser.getName() ;
                    if (startTag.equals("PASSWORD")) {
                        step = STEP_PASS ;
                    } else {
                        step = STEP_NONE ;
                    }
                } else if (eventType == XmlPullParser.END_TAG) {
                    step = STEP_NONE ;
                } else if (eventType == XmlPullParser.TEXT) {
                    String text = parser.getText() ;
                    if (step == STEP_PASS) {
                        try {
                            dev_password = text;
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else {
                        step = STEP_NONE ;
                    }
                }
                eventType = parser.next();
            }
            Log.d(TAG," encode data : "+ dev_password +"\n");

        } catch (Exception e) {
            e.printStackTrace();
        }

        if (is != null) {
            try {
                is.close() ;
            } catch (Exception e) {
                e.printStackTrace() ;
            }
        }

        answer2.setOnClickListener(new Button.OnClickListener() {
            public void onClick(View view) {
                String input_password = editText_Level2.getText().toString();

                try {
                    if (input_password.equals(getBase64decode(dev_password))){
                        getLocalIpAddress();
                    } else {
                        Toast toast = Toast.makeText(getApplicationContext(), "Failed", Toast.LENGTH_SHORT);
                        toast.show();
                    }
                } catch (UnsupportedEncodingException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public static String getBase64decode(String content) throws UnsupportedEncodingException {
        return new String(Base64.decode(content, Base64.DEFAULT),"UTF-8");
    }

    public void getLocalIpAddress() {
        try {
            for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements(); ) {
                NetworkInterface intf = en.nextElement();
                for (Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements(); ) {
                    InetAddress inetAddress = enumIpAddr.nextElement();
                    if (!inetAddress.isLoopbackAddress() && inetAddress instanceof Inet4Address) {
                        TextView answer_textview = (TextView)findViewById(R.id.set_answer);
                        answer_textview.setText("개발자 모드 입니다. \n"+"NAT IP : "+ inetAddress.getHostAddress().toString());
                        //textview.setText("Answer : "+ inetAddress.getHostAddress().toString());
                        //return inetAddress.getHostAddress();
                    }
                }
            }
        } catch (SocketException ex) {
            ex.printStackTrace();
        }

    }
}